const axios = require('axios');

/**
 * Gemini API service that uses direct HTTP calls
 */
class GeminiApiService {
  constructor(apiKey) {
    this.apiKey = apiKey;
    this.baseUrl = 'https://generativelanguage.googleapis.com/v1beta';
    console.log('ðŸ“¡ Initializing Direct Gemini API Service');
  }

  /**
   * Generate content using the Gemini API
   * @param {string} prompt - The prompt text
   * @param {object} options - Configuration options
   * @returns {Promise<object>} - API response
   */
  async generateContent(prompt, options = {}) {
    try {
      const model = options.model || 'gemini-2.0-flash';
      const temperature = options.temperature || 0.7;
      const maxOutputTokens = options.maxOutputTokens || 2048;
      
      const url = `${this.baseUrl}/models/${model}:generateContent?key=${this.apiKey}`;
      
      const payload = {
        contents: [
          {
            parts: [
              {
                text: prompt
              }
            ]
          }
        ],
        generationConfig: {
          temperature,
          maxOutputTokens,
          topK: 40,
          topP: 0.95,
        }
      };
      
      console.log(`Calling Gemini API with model: ${model}`);
      const response = await axios.post(url, payload, {
        headers: {
          'Content-Type': 'application/json'
        },
        timeout: 30000 // 30 seconds
      });
      
      return response.data;
    } catch (error) {
      console.error('Gemini API Error:', error.message);
      if (error.response) {
        console.error('API Response:', error.response.data);
      }
      throw error;
    }
  }
  
  /**
   * Test API connection
   */
  async testConnection() {
    try {
      const result = await this.generateContent('Hello world');
      return {
        success: true,
        model: result.model || 'unknown'
      };
    } catch (error) {
      console.error('API Connection Test Failed:', error.message);
      return {
        success: false,
        error: error.message
      };
    }
  }
  
  /**
   * Generate a code review
   */
  async generateReview(code, language, style = 'detailed') {
    try {
      const prompt = this._createReviewPrompt(code, language, style);
      
      const result = await this.generateContent(prompt, {
        model: 'gemini-2.0-flash', // gemini-2.0-pro for more comprehensive reviews
        temperature: style === 'concise' ? 0.3 : 0.7
      });
      
      if (!result.candidates || result.candidates.length === 0) {
        throw new Error('No response generated by API');
      }
      
      const text = result.candidates[0].content.parts[0].text;
      
      return {
        success: true,
        review: text,
        metadata: {
          language,
          reviewStyle: style,
          model: result.candidates[0].content.role || "gemini-2.0-flash",
          timestamp: new Date().toISOString()
        }
      };
    } catch (error) {
      console.error('Code review generation failed:', error);
      throw error;
    }
  }
  
  /**
   * Create a prompt for code review
   */
  _createReviewPrompt(code, language, style) {
    return `
      Act as a senior software engineer conducting a code review.
      Review the following ${language} code:

      \`\`\`${language}
      ${code}
      \`\`\`

      Provide a ${style} review covering:
      ${style === 'concise' ? 
          '- Key issues and quick fixes only' :
          `- Code quality and best practices
          - Potential bugs or issues
          - Performance considerations
          - Security concerns
          - Suggestions for improvement`
      }

      Format your response in markdown with clear sections.
      Be ${style === 'concise' ? 'brief and' : ''} professional in your feedback.
    `;
  }
}

module.exports = GeminiApiService;
